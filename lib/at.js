// Generated by CoffeeScript 1.9.0
(function() {
  var lt, moment;

  lt = require('long-timeout');

  moment = require('moment');

  module.exports = {
    schedule: function(date_str, callback) {
      return lt.setTimeout(callback, this._getTimeDiff(date_str));
    },
    _getTimeDiff: function(date_str, now) {
      if (now == null) {
        now = moment();
      }
      return this._parseStrToMoment(date_str).valueOf() - now.valueOf();
    },
    _parseStrToMoment: function(date_str) {
      var date, date_arr, hour, minute;
      date_arr = /^([0-9]+):([0-9]+)$/.exec(date_str);
      if (date_arr !== null) {
        hour = parseInt(date_arr[1], 10);
        minute = parseInt(date_arr[2], 10);
        if (!((0 <= hour && hour <= 23) && (0 <= minute && minute <= 59))) {
          throw new Error("invalid date");
        }
        date = moment().hours(hour).minutes(minute).seconds(0).milliseconds(0);
        if (date < moment()) {
          date.add(1, 'day');
        }
        return date;
      }
      date_arr = /([0-9]+-[0-9]+-[0-9]+ [0-9]+:[0-9]+)/.exec(date_str);
      if (date_arr === null) {
        date_arr = /([0-9]+\.[0-9]+\.[0-9]+ [0-9]+:[0-9]+)/.exec(date_str);
      }
      if (date_arr === null) {
        date_arr = /([0-9]+\/[0-9]+\/[0-9]+ [0-9]+:[0-9]+)/.exec(date_str);
      }
      if (date_arr !== null) {
        date = moment(date_arr[1], "YYYY-MM-DD HH:mm");
        if (!date.isValid()) {
          throw new Error('invalid date');
        }
        if (date < moment()) {
          throw new Error('specified date has past already');
        }
        return date;
      }
      throw new Error('invalid date');
    }
  };

}).call(this);
